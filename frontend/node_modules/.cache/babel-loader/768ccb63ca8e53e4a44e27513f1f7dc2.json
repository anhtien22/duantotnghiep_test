{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { FieldContext } from '.';\nimport warning from \"rc-util/es/warning\";\nimport { HOOK_MARK } from './FieldContext';\nimport { useState, useContext, useEffect, useRef, useMemo } from 'react';\nimport { getNamePath, getValue } from './utils/valueUtil';\nexport function stringify(value) {\n  try {\n    return JSON.stringify(value);\n  } catch (err) {\n    return Math.random();\n  }\n}\n\nfunction useWatch() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var _args$ = args[0],\n      dependencies = _args$ === void 0 ? [] : _args$,\n      form = args[1];\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var valueStr = useMemo(function () {\n    return stringify(value);\n  }, [value]);\n  var valueStrRef = useRef(valueStr);\n  valueStrRef.current = valueStr;\n  var fieldContext = useContext(FieldContext);\n  var formInstance = form || fieldContext;\n  var isValidForm = formInstance && formInstance._init; // Warning if not exist form instance\n\n  if (process.env.NODE_ENV !== 'production') {\n    warning(args.length === 2 ? form ? isValidForm : true : isValidForm, 'useWatch requires a form instance since it can not auto detect from context.');\n  }\n\n  var namePath = getNamePath(dependencies);\n  var namePathRef = useRef(namePath);\n  namePathRef.current = namePath;\n  useEffect(function () {\n    // Skip if not exist form instance\n    if (!isValidForm) {\n      return;\n    }\n\n    var getFieldsValue = formInstance.getFieldsValue,\n        getInternalHooks = formInstance.getInternalHooks;\n\n    var _getInternalHooks = getInternalHooks(HOOK_MARK),\n        registerWatch = _getInternalHooks.registerWatch;\n\n    var cancelRegister = registerWatch(function (store) {\n      var newValue = getValue(store, namePathRef.current);\n      var nextValueStr = stringify(newValue); // Compare stringify in case it's nest object\n\n      if (valueStrRef.current !== nextValueStr) {\n        valueStrRef.current = nextValueStr;\n        setValue(newValue);\n      }\n    }); // TODO: We can improve this perf in future\n\n    var initialValue = getValue(getFieldsValue(), namePathRef.current);\n    setValue(initialValue);\n    return cancelRegister;\n  }, // We do not need re-register since namePath content is the same\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [isValidForm]);\n  return value;\n}\n\nexport default useWatch;","map":{"version":3,"sources":["D:/Dự Án Tốt Nghiệp/duantotnghiep_test/frontend/node_modules/rc-field-form/es/useWatch.js"],"names":["_slicedToArray","FieldContext","warning","HOOK_MARK","useState","useContext","useEffect","useRef","useMemo","getNamePath","getValue","stringify","value","JSON","err","Math","random","useWatch","_len","arguments","length","args","Array","_key","_args$","dependencies","form","_useState","_useState2","setValue","valueStr","valueStrRef","current","fieldContext","formInstance","isValidForm","_init","process","env","NODE_ENV","namePath","namePathRef","getFieldsValue","getInternalHooks","_getInternalHooks","registerWatch","cancelRegister","store","newValue","nextValueStr","initialValue"],"mappings":"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","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { FieldContext } from '.';\nimport warning from \"rc-util/es/warning\";\nimport { HOOK_MARK } from './FieldContext';\nimport { useState, useContext, useEffect, useRef, useMemo } from 'react';\nimport { getNamePath, getValue } from './utils/valueUtil';\nexport function stringify(value) {\n  try {\n    return JSON.stringify(value);\n  } catch (err) {\n    return Math.random();\n  }\n}\nfunction useWatch() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  var _args$ = args[0],\n    dependencies = _args$ === void 0 ? [] : _args$,\n    form = args[1];\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    value = _useState2[0],\n    setValue = _useState2[1];\n  var valueStr = useMemo(function () {\n    return stringify(value);\n  }, [value]);\n  var valueStrRef = useRef(valueStr);\n  valueStrRef.current = valueStr;\n  var fieldContext = useContext(FieldContext);\n  var formInstance = form || fieldContext;\n  var isValidForm = formInstance && formInstance._init;\n  // Warning if not exist form instance\n  if (process.env.NODE_ENV !== 'production') {\n    warning(args.length === 2 ? form ? isValidForm : true : isValidForm, 'useWatch requires a form instance since it can not auto detect from context.');\n  }\n  var namePath = getNamePath(dependencies);\n  var namePathRef = useRef(namePath);\n  namePathRef.current = namePath;\n  useEffect(function () {\n    // Skip if not exist form instance\n    if (!isValidForm) {\n      return;\n    }\n    var getFieldsValue = formInstance.getFieldsValue,\n      getInternalHooks = formInstance.getInternalHooks;\n    var _getInternalHooks = getInternalHooks(HOOK_MARK),\n      registerWatch = _getInternalHooks.registerWatch;\n    var cancelRegister = registerWatch(function (store) {\n      var newValue = getValue(store, namePathRef.current);\n      var nextValueStr = stringify(newValue);\n      // Compare stringify in case it's nest object\n      if (valueStrRef.current !== nextValueStr) {\n        valueStrRef.current = nextValueStr;\n        setValue(newValue);\n      }\n    });\n    // TODO: We can improve this perf in future\n    var initialValue = getValue(getFieldsValue(), namePathRef.current);\n    setValue(initialValue);\n    return cancelRegister;\n  },\n  // We do not need re-register since namePath content is the same\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [isValidForm]);\n  return value;\n}\nexport default useWatch;"]},"metadata":{},"sourceType":"module"}