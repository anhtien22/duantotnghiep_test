{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\n\n/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport { createContext, useContext, useState } from \"react\";\nimport useDarkMode from \"use-dark-mode\"; // This context handles the color mode (light or dark) of the UI\n\nexport var ColorModeContext = createContext({\n  colorMode: \"light\",\n  toggleColorMode: function toggleColorMode() {}\n});\nvar ColorModeProvider = function ColorModeProvider(_ref) {\n  var value = _ref.value,\n    children = _ref.children;\n  var _useState = useState(value),\n    manualMode = _useState[0],\n    setManualMode = _useState[1];\n  var manualToggle = function manualToggle() {\n    if (manualMode === \"light\") {\n      setManualMode(\"dark\");\n    }\n    if (manualMode === \"dark\") {\n      setManualMode(\"light\");\n    }\n  };\n  var _useDarkMode = useDarkMode(false),\n    isDarkMode = _useDarkMode.value,\n    toggle = _useDarkMode.toggle;\n  var colorMode = isDarkMode ? \"dark\" : \"light\";\n  var childContext = value != null ? {\n    colorMode: manualMode,\n    toggleColorMode: manualToggle\n  } : {\n    colorMode: colorMode,\n    toggleColorMode: toggle\n  };\n  return jsx(ColorModeContext.Provider, {\n    value: childContext\n  }, children);\n};\nvar DarkMode = function DarkMode(props) {\n  return jsx(ColorModeProvider, _extends({\n    value: \"dark\"\n  }, props));\n};\nvar LightMode = function LightMode(props) {\n  return jsx(ColorModeProvider, _extends({\n    value: \"light\"\n  }, props));\n};\nvar useColorMode = function useColorMode() {\n  var context = useContext(ColorModeContext);\n  if (context === undefined) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\");\n  }\n  return context;\n};\nexport default ColorModeProvider;\nexport { useColorMode, DarkMode, LightMode };","map":{"version":3,"names":["_extends","jsx","createContext","useContext","useState","useDarkMode","ColorModeContext","colorMode","toggleColorMode","ColorModeProvider","_ref","value","children","_useState","manualMode","setManualMode","manualToggle","_useDarkMode","isDarkMode","toggle","childContext","Provider","DarkMode","props","LightMode","useColorMode","context","undefined","Error"],"sources":["D:/Dự Án Tốt Nghiệp/duantotnghiep_test/frontend/node_modules/@chakra-ui/core/dist/es/ColorModeProvider/index.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\n\n/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport { createContext, useContext, useState } from \"react\";\nimport useDarkMode from \"use-dark-mode\"; // This context handles the color mode (light or dark) of the UI\n\nexport var ColorModeContext = createContext({\n  colorMode: \"light\",\n  toggleColorMode: function toggleColorMode() {}\n});\n\nvar ColorModeProvider = function ColorModeProvider(_ref) {\n  var value = _ref.value,\n      children = _ref.children;\n\n  var _useState = useState(value),\n      manualMode = _useState[0],\n      setManualMode = _useState[1];\n\n  var manualToggle = function manualToggle() {\n    if (manualMode === \"light\") {\n      setManualMode(\"dark\");\n    }\n\n    if (manualMode === \"dark\") {\n      setManualMode(\"light\");\n    }\n  };\n\n  var _useDarkMode = useDarkMode(false),\n      isDarkMode = _useDarkMode.value,\n      toggle = _useDarkMode.toggle;\n\n  var colorMode = isDarkMode ? \"dark\" : \"light\";\n  var childContext = value != null ? {\n    colorMode: manualMode,\n    toggleColorMode: manualToggle\n  } : {\n    colorMode: colorMode,\n    toggleColorMode: toggle\n  };\n  return jsx(ColorModeContext.Provider, {\n    value: childContext\n  }, children);\n};\n\nvar DarkMode = function DarkMode(props) {\n  return jsx(ColorModeProvider, _extends({\n    value: \"dark\"\n  }, props));\n};\n\nvar LightMode = function LightMode(props) {\n  return jsx(ColorModeProvider, _extends({\n    value: \"light\"\n  }, props));\n};\n\nvar useColorMode = function useColorMode() {\n  var context = useContext(ColorModeContext);\n\n  if (context === undefined) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\");\n  }\n\n  return context;\n};\n\nexport default ColorModeProvider;\nexport { useColorMode, DarkMode, LightMode };"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,gCAAgC;;AAErD;AACA,SAASC,GAAG,QAAQ,eAAe;AACnC,SAASC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAC3D,OAAOC,WAAW,MAAM,eAAe,CAAC,CAAC;;AAEzC,OAAO,IAAIC,gBAAgB,GAAGJ,aAAa,CAAC;EAC1CK,SAAS,EAAE,OAAO;EAClBC,eAAe,EAAE,SAASA,eAAe,GAAG,CAAC;AAC/C,CAAC,CAAC;AAEF,IAAIC,iBAAiB,GAAG,SAASA,iBAAiB,CAACC,IAAI,EAAE;EACvD,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,QAAQ,GAAGF,IAAI,CAACE,QAAQ;EAE5B,IAAIC,SAAS,GAAGT,QAAQ,CAACO,KAAK,CAAC;IAC3BG,UAAU,GAAGD,SAAS,CAAC,CAAC,CAAC;IACzBE,aAAa,GAAGF,SAAS,CAAC,CAAC,CAAC;EAEhC,IAAIG,YAAY,GAAG,SAASA,YAAY,GAAG;IACzC,IAAIF,UAAU,KAAK,OAAO,EAAE;MAC1BC,aAAa,CAAC,MAAM,CAAC;IACvB;IAEA,IAAID,UAAU,KAAK,MAAM,EAAE;MACzBC,aAAa,CAAC,OAAO,CAAC;IACxB;EACF,CAAC;EAED,IAAIE,YAAY,GAAGZ,WAAW,CAAC,KAAK,CAAC;IACjCa,UAAU,GAAGD,YAAY,CAACN,KAAK;IAC/BQ,MAAM,GAAGF,YAAY,CAACE,MAAM;EAEhC,IAAIZ,SAAS,GAAGW,UAAU,GAAG,MAAM,GAAG,OAAO;EAC7C,IAAIE,YAAY,GAAGT,KAAK,IAAI,IAAI,GAAG;IACjCJ,SAAS,EAAEO,UAAU;IACrBN,eAAe,EAAEQ;EACnB,CAAC,GAAG;IACFT,SAAS,EAAEA,SAAS;IACpBC,eAAe,EAAEW;EACnB,CAAC;EACD,OAAOlB,GAAG,CAACK,gBAAgB,CAACe,QAAQ,EAAE;IACpCV,KAAK,EAAES;EACT,CAAC,EAAER,QAAQ,CAAC;AACd,CAAC;AAED,IAAIU,QAAQ,GAAG,SAASA,QAAQ,CAACC,KAAK,EAAE;EACtC,OAAOtB,GAAG,CAACQ,iBAAiB,EAAET,QAAQ,CAAC;IACrCW,KAAK,EAAE;EACT,CAAC,EAAEY,KAAK,CAAC,CAAC;AACZ,CAAC;AAED,IAAIC,SAAS,GAAG,SAASA,SAAS,CAACD,KAAK,EAAE;EACxC,OAAOtB,GAAG,CAACQ,iBAAiB,EAAET,QAAQ,CAAC;IACrCW,KAAK,EAAE;EACT,CAAC,EAAEY,KAAK,CAAC,CAAC;AACZ,CAAC;AAED,IAAIE,YAAY,GAAG,SAASA,YAAY,GAAG;EACzC,IAAIC,OAAO,GAAGvB,UAAU,CAACG,gBAAgB,CAAC;EAE1C,IAAIoB,OAAO,KAAKC,SAAS,EAAE;IACzB,MAAM,IAAIC,KAAK,CAAC,sDAAsD,CAAC;EACzE;EAEA,OAAOF,OAAO;AAChB,CAAC;AAED,eAAejB,iBAAiB;AAChC,SAASgB,YAAY,EAAEH,QAAQ,EAAEE,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}