{"ast":null,"code":"import { parseColor as parse, Color } from '@progress/kendo-drawing';\nimport { isPresent, fitIntoBounds } from './misc';\n/**\n * @hidden\n *\n * Returns the hex or RGBA string representation of the color.\n */\nexport var parseColor = function parseColor(value, format, safe) {\n  if (safe === void 0) {\n    safe = true;\n  }\n  var allowedFormats = ['hex', 'rgba']; // TODO: constant?\n  // Angular supports third type: name : const allowedFormats: Array<string> = ['hex', 'rgba', 'name'];\n  if (allowedFormats.indexOf(format) === -1) {\n    throw new Error(\"Unsupported color output format '\".concat(format, \"'. The available options are 'hex' or 'rgba'.\"));\n  }\n  if (!isPresent(value)) {\n    return;\n  }\n  var parsedColor = parse(value.trim(), safe);\n  if (!isPresent(parsedColor)) {\n    return;\n  }\n  return format === 'hex' ? parsedColor.toCss() : parsedColor.toCssRgba();\n};\n/**\n * @hidden\n *\n * Returns an HSV object representation of the color string.\n */\nexport var getHSV = function getHSV(value, safe) {\n  if (safe === void 0) {\n    safe = true;\n  }\n  var parsed = parse(value, safe);\n  if (!isPresent(parsed)) {\n    return {};\n  }\n  return parsed.toHSV();\n};\n/**\n * @hidden\n *\n * Returns an RGBA object representation of the color string.\n */\nexport var getRGBA = function getRGBA(value, safe) {\n  if (safe === void 0) {\n    safe = true;\n  }\n  var parsed = parse(value, safe);\n  if (!isPresent(parsed)) {\n    return {};\n  }\n  return parsed.toBytes();\n};\n/**\n * @hidden\n *\n * Returns the RGBA string representation of the color.\n */\nexport var getColorFromHSV = function getColorFromHSV(hsva) {\n  var hue = fitIntoBounds(hsva.h, 0, 359.9);\n  var saturation = fitIntoBounds(hsva.s, 0, 1);\n  var value = fitIntoBounds(hsva.v, 0, 1);\n  var alpha = fitIntoBounds(hsva.a, 0, 1);\n  return Color.fromHSV(hue, saturation, value, alpha).toCssRgba();\n};\n/**\n * @hidden\n *\n * Returns the RGBA string representation of the color based on the `hue` and\n * assuming the `value`, `saturation`, and `alpha` have a value of `1`.\n */\nexport var getColorFromHue = function getColorFromHue(hue) {\n  return getColorFromHSV({\n    h: hue,\n    s: 1,\n    v: 1,\n    a: 1\n  });\n};\n/**\n * @hidden\n *\n * Returns the RGBA string representation of the color.\n */\nexport var getColorFromRGBA = function getColorFromRGBA(rgba) {\n  var red = fitIntoBounds(rgba.r, 0, 255);\n  var green = fitIntoBounds(rgba.g, 0, 255);\n  var blue = fitIntoBounds(rgba.b, 0, 255);\n  var alpha = fitIntoBounds(rgba.a, 0, 1);\n  return Color.fromBytes(red, green, blue, alpha).toCssRgba();\n};\n/**\n * @hidden\n *\n * Returns the RGB object representation of the color based on the background color.\n */\nexport var getRGBFromRGBA = function getRGBFromRGBA(foregroundColor, backgroundColor) {\n  var r1 = fitIntoBounds(foregroundColor.r, 0, 255);\n  var g1 = fitIntoBounds(foregroundColor.g, 0, 255);\n  var b1 = fitIntoBounds(foregroundColor.b, 0, 255);\n  var a1 = fitIntoBounds(foregroundColor.a, 0, 1);\n  var r2 = fitIntoBounds(backgroundColor.r, 0, 255);\n  var g2 = fitIntoBounds(backgroundColor.g, 0, 255);\n  var b2 = fitIntoBounds(backgroundColor.b, 0, 255);\n  return {\n    r: Math.round((1 - a1) * r2 + a1 * r1),\n    g: Math.round((1 - a1) * g2 + a1 * g1),\n    b: Math.round((1 - a1) * b2 + a1 * b1)\n  };\n};\n/**\n * @hidden\n *\n * Returns the relative luminance.\n */\nexport var getLuminance = function getLuminance(rgb) {\n  var a = [rgb.r || 0, rgb.g || 0, rgb.b || 0].map(function (v) {\n    v /= 255;\n    return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\n  });\n  return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;\n};\n/**\n * @hidden\n *\n * Returns the color contrast.\n */\nexport var getContrast = function getContrast(luminance1, luminance2) {\n  var brightest = Math.max(luminance1, luminance2);\n  var darkest = Math.min(luminance1, luminance2);\n  return (brightest + 0.05) / (darkest + 0.05);\n};\n/**\n * @hidden\n *\n * Returns the color contrast from two RGBA colors.\n */\nexport var getContrastFromTwoRGBAs = function getContrastFromTwoRGBAs(a, b) {\n  return getContrast(getLuminance(getRGBFromRGBA(a, b)), getLuminance(getRGBFromRGBA(b, {\n    r: 0,\n    g: 0,\n    b: 0,\n    a: 1\n  })));\n};","map":{"version":3,"names":["parseColor","parse","Color","isPresent","fitIntoBounds","value","format","safe","allowedFormats","indexOf","Error","concat","parsedColor","trim","toCss","toCssRgba","getHSV","parsed","toHSV","getRGBA","toBytes","getColorFromHSV","hsva","hue","h","saturation","s","v","alpha","a","fromHSV","getColorFromHue","getColorFromRGBA","rgba","red","r","green","g","blue","b","fromBytes","getRGBFromRGBA","foregroundColor","backgroundColor","r1","g1","b1","a1","r2","g2","b2","Math","round","getLuminance","rgb","map","pow","getContrast","luminance1","luminance2","brightest","max","darkest","min","getContrastFromTwoRGBAs"],"sources":["D:/Dự Án Tốt Nghiệp/duantotnghiep_test/frontend/node_modules/@progress/kendo-react-inputs/dist/es/colors/utils/color-parser.js"],"sourcesContent":["import { parseColor as parse, Color } from '@progress/kendo-drawing';\nimport { isPresent, fitIntoBounds } from './misc';\n/**\n * @hidden\n *\n * Returns the hex or RGBA string representation of the color.\n */\nexport var parseColor = function (value, format, safe) {\n    if (safe === void 0) { safe = true; }\n    var allowedFormats = ['hex', 'rgba']; // TODO: constant?\n    // Angular supports third type: name : const allowedFormats: Array<string> = ['hex', 'rgba', 'name'];\n    if (allowedFormats.indexOf(format) === -1) {\n        throw new Error(\"Unsupported color output format '\".concat(format, \"'. The available options are 'hex' or 'rgba'.\"));\n    }\n    if (!isPresent(value)) {\n        return;\n    }\n    var parsedColor = parse(value.trim(), safe);\n    if (!isPresent(parsedColor)) {\n        return;\n    }\n    return format === 'hex' ? parsedColor.toCss() : parsedColor.toCssRgba();\n};\n/**\n * @hidden\n *\n * Returns an HSV object representation of the color string.\n */\nexport var getHSV = function (value, safe) {\n    if (safe === void 0) { safe = true; }\n    var parsed = parse(value, safe);\n    if (!isPresent(parsed)) {\n        return {};\n    }\n    return parsed.toHSV();\n};\n/**\n * @hidden\n *\n * Returns an RGBA object representation of the color string.\n */\nexport var getRGBA = function (value, safe) {\n    if (safe === void 0) { safe = true; }\n    var parsed = parse(value, safe);\n    if (!isPresent(parsed)) {\n        return {};\n    }\n    return parsed.toBytes();\n};\n/**\n * @hidden\n *\n * Returns the RGBA string representation of the color.\n */\nexport var getColorFromHSV = function (hsva) {\n    var hue = fitIntoBounds(hsva.h, 0, 359.9);\n    var saturation = fitIntoBounds(hsva.s, 0, 1);\n    var value = fitIntoBounds(hsva.v, 0, 1);\n    var alpha = fitIntoBounds(hsva.a, 0, 1);\n    return Color.fromHSV(hue, saturation, value, alpha).toCssRgba();\n};\n/**\n * @hidden\n *\n * Returns the RGBA string representation of the color based on the `hue` and\n * assuming the `value`, `saturation`, and `alpha` have a value of `1`.\n */\nexport var getColorFromHue = function (hue) {\n    return getColorFromHSV({ h: hue, s: 1, v: 1, a: 1 });\n};\n/**\n * @hidden\n *\n * Returns the RGBA string representation of the color.\n */\nexport var getColorFromRGBA = function (rgba) {\n    var red = fitIntoBounds(rgba.r, 0, 255);\n    var green = fitIntoBounds(rgba.g, 0, 255);\n    var blue = fitIntoBounds(rgba.b, 0, 255);\n    var alpha = fitIntoBounds(rgba.a, 0, 1);\n    return Color.fromBytes(red, green, blue, alpha).toCssRgba();\n};\n/**\n * @hidden\n *\n * Returns the RGB object representation of the color based on the background color.\n */\nexport var getRGBFromRGBA = function (foregroundColor, backgroundColor) {\n    var r1 = fitIntoBounds(foregroundColor.r, 0, 255);\n    var g1 = fitIntoBounds(foregroundColor.g, 0, 255);\n    var b1 = fitIntoBounds(foregroundColor.b, 0, 255);\n    var a1 = fitIntoBounds(foregroundColor.a, 0, 1);\n    var r2 = fitIntoBounds(backgroundColor.r, 0, 255);\n    var g2 = fitIntoBounds(backgroundColor.g, 0, 255);\n    var b2 = fitIntoBounds(backgroundColor.b, 0, 255);\n    return {\n        r: Math.round(((1 - a1) * r2) + (a1 * r1)),\n        g: Math.round(((1 - a1) * g2) + (a1 * g1)),\n        b: Math.round(((1 - a1) * b2) + (a1 * b1))\n    };\n};\n/**\n * @hidden\n *\n * Returns the relative luminance.\n */\nexport var getLuminance = function (rgb) {\n    var a = [rgb.r || 0, rgb.g || 0, rgb.b || 0].map(function (v) {\n        v /= 255;\n        return v <= 0.03928\n            ? v / 12.92\n            : Math.pow((v + 0.055) / 1.055, 2.4);\n    });\n    return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;\n};\n/**\n * @hidden\n *\n * Returns the color contrast.\n */\nexport var getContrast = function (luminance1, luminance2) {\n    var brightest = Math.max(luminance1, luminance2);\n    var darkest = Math.min(luminance1, luminance2);\n    return (brightest + 0.05)\n        / (darkest + 0.05);\n};\n/**\n * @hidden\n *\n * Returns the color contrast from two RGBA colors.\n */\nexport var getContrastFromTwoRGBAs = function (a, b) {\n    return getContrast(getLuminance(getRGBFromRGBA(a, b)), getLuminance(getRGBFromRGBA(b, { r: 0, g: 0, b: 0, a: 1 })));\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}