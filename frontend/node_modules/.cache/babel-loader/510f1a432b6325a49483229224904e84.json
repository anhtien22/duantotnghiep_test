{"ast":null,"code":"var _jsxFileName = \"D:\\\\D\\u1EF1 \\xC1n T\\u1ED1t Nghi\\u1EC7p\\\\duantotnghiep_test\\\\frontend\\\\src\\\\context\\\\brand\\\\BrandState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport BrandContext from './brandContext';\nimport axios from 'axios'; // Function for cleaning null, undefined and empty strings values in objects\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction clean(obj) {\n  for (var propName in obj) {\n    if (obj[propName] === null || obj[propName] === undefined || obj[propName] === '') {\n      delete obj[propName];\n    }\n  }\n\n  return obj;\n} // ------------------------------------------\n// Category State\n// ------------------------------------------\n\n\nconst BrandState = props => {\n  _s();\n\n  const [brands, setBrands] = useState([]);\n  const [brandsError, setBrandsError] = useState(null);\n  const [brandsLoading, setBrandsLoading] = useState(false);\n  const [brandsMessage, setBrandsMessage] = useState(null);\n  useEffect(() => {\n    setTimeout(() => {\n      setBrandsError(null);\n      setBrandsMessage(null);\n    }, 3000);\n  }, [brandsError, brandsMessage]); // Error Handler function\n\n  const errorHandler = (err, info) => {\n    if (err.response) {\n      setBrandsError({\n        variant: 'danger',\n        message: `${info}, ${err.response.data.error}`\n      });\n    } else if (err.request) {\n      setBrandsError({\n        variant: 'danger',\n        message: `${info},  Không có phản hồi từ máy chủ!`\n      });\n    } else {\n      setBrandsError({\n        variant: 'danger',\n        message: err.message\n      });\n    }\n\n    setBrandsLoading(false);\n  }; // Add new category\n\n\n  const addBrand = async local => {\n    const brandBody = clean({\n      local\n    });\n\n    try {\n      const userToken = JSON.parse(localStorage.getItem('userToken'));\n      const headers = {\n        Authorization: `Bearer ${userToken && userToken}`\n      };\n      setBrandsLoading(true);\n      await axios.post('api/brand/add', brandBody, {\n        headers\n      });\n      setBrands([...brands, brandBody]);\n      setBrandsMessage({\n        variant: 'success',\n        message: 'Thương hiệu được thêm thành công!'\n      });\n      window.location.reload();\n      setBrandsLoading(false);\n      setBrandsError(null);\n    } catch (err) {\n      errorHandler(err);\n    }\n  }; // get all categories\n\n\n  const getBrands = async (limit, skip, keyword) => {\n    try {\n      setBrandsLoading(true);\n      const {\n        data\n      } = await axios.get('api/brand/getAll', {\n        params: {\n          limit,\n          skip,\n          keyword\n        }\n      });\n      setBrands(data.brands);\n      setBrandsLoading(false);\n      setBrandsError(null);\n    } catch (err) {\n      errorHandler(err);\n    }\n  }; // Delete Category\n\n\n  const deleteBrand = async id => {\n    try {\n      setBrandsLoading(true);\n      const userToken = JSON.parse(localStorage.getItem('userToken'));\n      const headers = {\n        Authorization: `Bearer ${userToken && userToken}`,\n        'Content-Type': 'multipart/form-data'\n      };\n      const {\n        data\n      } = await axios.delete(`/api/brand/${id}`, {\n        headers\n      });\n      setBrandsLoading(false);\n      setBrandsError(null);\n      setBrandsMessage({\n        variant: 'success',\n        message: 'Xóa thành công!'\n      });\n      window.location.reload();\n      return data.categories;\n    } catch (err) {\n      errorHandler(err, 'Không tìm thấy sản phẩm');\n    }\n  }; // get one category\n\n\n  const getOneBrand = async id => {\n    try {\n      const {\n        data\n      } = await axios.get(`/api/brand/${id}`);\n      return data.categories;\n    } catch (err) {\n      errorHandler(err);\n    }\n  };\n\n  const updateBrand = async (id, local) => {\n    try {\n      const userToken = JSON.parse(localStorage.getItem('userToken'));\n      const headers = {\n        Authorization: `Bearer ${userToken && userToken}`\n      };\n      setBrandsLoading(true);\n      await axios.patch(`api/brand/${id}`, {\n        local\n      }, {\n        headers\n      });\n      getBrands();\n      setBrandsMessage({\n        variant: 'info',\n        message: 'Thương hiệu được cập nhật'\n      });\n      setBrandsLoading(false);\n      setBrandsError(null);\n    } catch (err) {\n      errorHandler(err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(BrandContext.Provider, {\n    value: {\n      brands,\n      brandsError,\n      brandsLoading,\n      brandsMessage,\n      getBrands,\n      addBrand,\n      deleteBrand,\n      getOneBrand,\n      updateBrand\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BrandState, \"jPlF96wZF0q0d1mEF1CcxM9H8wo=\");\n\n_c = BrandState;\nexport default BrandState;\n\nvar _c;\n\n$RefreshReg$(_c, \"BrandState\");","map":{"version":3,"sources":["D:/Dự Án Tốt Nghiệp/duantotnghiep_test/frontend/src/context/brand/BrandState.js"],"names":["React","useEffect","useState","BrandContext","axios","clean","obj","propName","undefined","BrandState","props","brands","setBrands","brandsError","setBrandsError","brandsLoading","setBrandsLoading","brandsMessage","setBrandsMessage","setTimeout","errorHandler","err","info","response","variant","message","data","error","request","addBrand","local","brandBody","userToken","JSON","parse","localStorage","getItem","headers","Authorization","post","window","location","reload","getBrands","limit","skip","keyword","get","params","deleteBrand","id","delete","categories","getOneBrand","updateBrand","patch","children"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport BrandContext from './brandContext'\r\nimport axios from 'axios'\r\n\r\n\r\n// Function for cleaning null, undefined and empty strings values in objects\r\nfunction clean(obj) {\r\n  for (var propName in obj) {\r\n    if (\r\n      obj[propName] === null ||\r\n      obj[propName] === undefined ||\r\n      obj[propName] === ''\r\n    ) {\r\n      delete obj[propName]\r\n    }\r\n  }\r\n  return obj\r\n}\r\n\r\n// ------------------------------------------\r\n// Category State\r\n// ------------------------------------------\r\nconst BrandState = props => {\r\n  const [brands, setBrands] = useState([])\r\n  const [brandsError, setBrandsError] = useState(null)\r\n  const [brandsLoading, setBrandsLoading] = useState(false)\r\n  const [brandsMessage, setBrandsMessage] = useState(null)\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n        setBrandsError(null)\r\n        setBrandsMessage(null)\r\n    }, 3000)\r\n  }, [brandsError, brandsMessage])\r\n\r\n  // Error Handler function\r\n  const errorHandler = (err, info) => {\r\n    if (err.response) {\r\n        setBrandsError({\r\n        variant: 'danger',\r\n        message: `${info}, ${err.response.data.error}`,\r\n      })\r\n    } else if (err.request) {\r\n        setBrandsError({\r\n        variant: 'danger',\r\n        message: `${info},  Không có phản hồi từ máy chủ!`,\r\n      })\r\n    } else {\r\n        setBrandsError({ variant: 'danger', message: err.message })\r\n    }\r\n    setBrandsLoading(false)\r\n  }\r\n\r\n  // Add new category\r\n  const addBrand = async local => {\r\n    const brandBody = clean({ local })\r\n    try {\r\n      const userToken = JSON.parse(localStorage.getItem('userToken'))\r\n      const headers = {\r\n        Authorization: `Bearer ${userToken && userToken}`,\r\n      }\r\n      setBrandsLoading(true)\r\n      await axios.post('api/brand/add', brandBody, { headers })\r\n      setBrands([...brands, brandBody])\r\n      setBrandsMessage({\r\n        variant: 'success',\r\n        message: 'Thương hiệu được thêm thành công!',\r\n      })\r\n      window.location.reload();\r\n      setBrandsLoading(false)\r\n      setBrandsError(null)\r\n    } catch (err) {\r\n      errorHandler(err)\r\n    }\r\n  }\r\n\r\n  // get all categories\r\n  const getBrands = async (limit, skip, keyword) => {\r\n    try {\r\n        setBrandsLoading(true)\r\n      const { data } = await axios.get('api/brand/getAll', {\r\n        params: { limit, skip, keyword},\r\n      })\r\n      setBrands(data.brands)\r\n      setBrandsLoading(false)\r\n      setBrandsError(null)\r\n    } catch (err) {\r\n      errorHandler(err)\r\n    }\r\n  }\r\n\r\n// Delete Category\r\nconst deleteBrand = async id  => {\r\n  try {\r\n    setBrandsLoading(true)\r\n    const userToken = JSON.parse(localStorage.getItem('userToken'))\r\n    const headers = {\r\n      Authorization: `Bearer ${userToken && userToken}`,\r\n      'Content-Type': 'multipart/form-data',\r\n    }\r\n    const { data } = await axios.delete(`/api/brand/${id}`, { headers })\r\n    setBrandsLoading(false)\r\n    setBrandsError(null)\r\n    setBrandsMessage({\r\n      variant: 'success',\r\n      message: 'Xóa thành công!',\r\n    })\r\n    window.location.reload();\r\n    return data.categories\r\n  } catch (err) {\r\n    errorHandler(err, 'Không tìm thấy sản phẩm')\r\n  }\r\n}\r\n\r\n  // get one category\r\n  const getOneBrand = async id => {\r\n    try {\r\n      const { data } = await axios.get(`/api/brand/${id}`)\r\n      return data.categories\r\n    } catch (err) {\r\n      errorHandler(err)\r\n    }\r\n  }\r\n\r\n  const updateBrand = async (id, local) => {\r\n    try {\r\n      const userToken = JSON.parse(localStorage.getItem('userToken'))\r\n      const headers = {\r\n        Authorization: `Bearer ${userToken && userToken}`,\r\n      }\r\n      setBrandsLoading(true)\r\n      await axios.patch(`api/brand/${id}`, { local }, { headers })\r\n      getBrands()\r\n      setBrandsMessage({\r\n        variant: 'info',\r\n        message: 'Thương hiệu được cập nhật',\r\n      })\r\n      setBrandsLoading(false)\r\n      setBrandsError(null)\r\n    } catch (err) {\r\n      errorHandler(err)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <BrandContext.Provider\r\n      value={{\r\n        brands,\r\n        brandsError,\r\n        brandsLoading,\r\n        brandsMessage,\r\n        getBrands,\r\n        addBrand,\r\n        deleteBrand,\r\n        getOneBrand,\r\n        updateBrand,\r\n      }}>\r\n      {props.children}\r\n    </BrandContext.Provider>\r\n  )\r\n}\r\n\r\nexport default BrandState\r\n"]},"metadata":{},"sourceType":"module"}